Errors and Exceptions:

■ Errors:

1) AttributeError: 
    It occurs when an attribute or method is not found on an object, such as when trying to access a non-existent attribute of a class instance.

2) AssertionError:
    It occurs when the assert statement fails.

3) ImportError: 
    It occurs when an import statement fails to find or load a module.

4) IndexError: 
    It occurs when an index is out of range for a list, tuple, or other sequence type.

5) IOError: 
    It occurs when an I/O operation, such as reading or writing a file, fails due to an input or output error.

6) KeyError: 
    It occurs when a key is not found in a dictionary.

7) NameError: 
    It occurs when a variable or function name is not found in the current scope.

8) SyntaxError: 
    It occurs when the interpreter encounters a syntax error, such as a misspelled keyword, a missing colon, or an unbalanced parenthesis.

9) TypeError: 
    It occurs when an operation or function is applied to an object of the wrong type, such as adding a string to an integer.

10) ValueError: 
    It occurs when a function or method is called with an invalid argument or input, such as trying to convert a string to an integer when
    the string does not represent a valid integer.

11) ZeroDivisionError: 
     It occurs when an attempt is made to divide a number by zero.

etc.



Exceptions Handling:

■ Try and Except Statement:

⫸ Syntax:

try:
  # Statement
except:
  # Statement


# Code - Try / Except
i)
try:
  a = int(input("Enter a = "))
  b = int(input("Enter b = "))
  print("a // b = ", a // b)

except:
  print("Invalid Input.")

- O/P.:
Enter a = 10
Enter b = 0
Invalid Input.



■ Handling Specific Exception:

⫸ Syntax:

try:
  # Statement
except ErrorName:
  # Statement
.
.

# Code - Try / Except
i)
try:
  a = int(input("Enter a = "))
  b = int(input("Enter b = "))
  print("a // b = ", a // b)

except ZeroDivisionError:
  print("b cannot be 0.")

except ValueError:
  print("Input should be Integer.")

- O/P.:
Enter a = Py
Input should be Integer.



■ Handling Exceptions with Try/Except/Finally with Else Clause:

⫸ Syntax:

try:
  # Statement 
except:
  # Handling of Exception (If Required)
else:
  # Execute if No Exception
finally:
  # Statement (Always Executed)


# Code - Try / Except / Else / Finally
i)
try:
  a = int(input("Enter a = "))
  b = int(input("Enter b = "))
  c = a // b

except ZeroDivisionError:
  print("b cannot be 0.")

else:
  print("a // b = ", c)

finally:
  print("Code Finished.")

- O/P.:
Enter a = 20
Enter b = 10
a // b = 2
Code Finished.



■ Raising Exceptions:

# Code - Raise an Exceptions
i)
x = "Hello"

if not type(x) is int:
  raise TypeError("Only Integers are allowed.")

- O/P.:
Only Integers are allowed.


ii)
try:
  a = int(input("Enter a = "))
  b = int(input("Enter b = "))

  if a > 100 or b > 100:
    raise ValueError("Input should be less than 100.")
  
  else:
    print("a // b = ", a // b)

except ValueError as e:
  print(e) 

- O/P.:
Enter a = 200
Enter b = 10
Input should be less than 100.

