 vi) Literals Collection:

 ■ vi.ii) Tuple: 
           It is also a list of comma-separated elements or values in round () brackets. 
           The values can be of any data type but can’t be changed (immutable).
           It allows duplicate values.

# Code - Tuple
i)
Null_Tuple = ()                    # Null Tuple
print(Null_Tuple)

- O/P.: 
()


ii)
Input = (7)                        # Invalid for tuple - Python will consider it as interger
print(type(Input))           

Input = (7,)                       # For single element ',' is compulsary to create tuple
print(type(Input))

print(len(Input))                  # Length of Tuple

- O/P.: 
<class 'int'>
<class 'tuple'>
1


# Code - Concatenation of Tuples
i)
Tuple1 = ('P', 'Y', 'T', 'H')
Tuple2 = ( 0, 'N', 7.)

Concate_Tuple = Tuple1 + Tuple2
print(Concate_Tuple)

- O/P.:
('P', 'Y', 'T', 'H', 0, 'N', 7.0)


# Code - Repetitions of Tuples
i)
Tuple = ('Python', 7.)
Repeat_Tuple = Tuple * 2
print(Repeat_Tuple)

- O/P.:
('Python', 7.0, 'Python', 7.0)


# Code - Deleting a tuple
i)
Tuple = ('P', 'Y', 'T', 'H', 0, 'N', 7.)
print(Tuple)

del Tuple
print(Tuple)

- O/P.:
('P', 'Y', 'T', 'H', 0, 'N', 7.0)
NameError: name 'Tuple' is not defined.



⫸ Tuple Index:
    Access individual character by using numeric value.

# Code - Tuple Index Accessing
i)
          0    1    2    3   4   5   6
Tuple = ('P', 'Y', 'T', 'H', 0, 'N', 7.)
         -7   -6   -5   -4  -3  -2  -1

print(Tuple[2])                         # Positive Index Accessing
print(Tuple[-2])                        # Negative Index = len(List) - List[-ve index]

- O/P.: 
T
N



⫸ Tuple Slicing:
    Accessing part of tuple (Subtuple). 

Default Syntax:
[Start index (0) : Last index (Length of tuple)]

# Code - Tuple Index Slicing
i)
Tuple = ('P','Y','T','H', 0, 'N', 7.)

print(Tuple[-5:-1])                     # Negative Index Slicing

print(Tuple[1:5])                       # Positive Index Slicing    
print(Tuple[1:5:2])                     # [Strt index : End index : No. of jumps]

- O/P.: 
('T', 'H', 0, 'N')

('Y', 'T', 'H', 0) 
('Y', 'H')



⫸ Tuple Methods:
    count(ele), index(ele)

# Code - Methods
i)
Tuple = ('P', 'Y', 'T', 'H', 0, 'N', 7, 'P', 'Y')
print(Tuple.count(7))

- O/P.: 
1


ii)
Tuple = ('P', 'Y', 'T', 'H', 0, 'N', 7, 'P', 'Y')

print(Tuple.index(7))     
or 
print(Tuple.index(7, 2, 8))             # (Ele, Strt index, End index)

- O/P.: 
6



⫸ Conversion:
    For performing different method that are not available in tuple, need to convert tuple into list, perform methods and again convert list into tuple.

# Code - Converting String into a Tuple
i)
print(tuple('Python'))

- O/P.:
('P', 'y', 't', 'h', 'o', 'n')


# Code - Converting List into a Tuple
i)
List = ['P', 'Y', 'T', 'H', '0', 'N', '7']
print(tuple(List))

- O/P.:
('P', 'Y', 'T', 'H', '0', 'N', '7')

