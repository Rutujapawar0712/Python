Python Data Types: 
 It is used to define the type of data stored in a variable.

# Code - Identify the Type of data
i)
Data = 12345.
print(type(Data))

- O/P.:
<class 'float'>


ii)
Data = None
print(type(Data))

- O/P.:
<class 'NoneType'>


Some built-in Python Data Types are:

i)    String    : str
ii)   Numeric   : int, float, complex
iii)  Binary    : bytes, bytearray, memoryview 
iv)   Boolean   : bool
v)    Sequence  : list, tuple, range
vi)   Mapping   : dict
vii)  Set       : set, frozenset
viii) None Type : NoneType



Typeconversion / Typecasting:
 The conversion of one data type into other data type.

Type of Typecasting:

1) Implicit Typeconversion:
    Conversion will be done by python interpreter from lower to higher data type automatically to prevent loss of data.

# Code - Implicit Typeconversion
i)
a, b = 2, 3                 # Input is Integer Value
print(a/b)

- O/P.: 
0.6666666666666666          # Output is Float value



2) Explicit Typecasting: 
    Conversion done by programmer as per requirement.

# Code - Explicit Typecasting
i)
a = float(7)                # Convert - Int to Float
print(a)
print(type(a))

- O/P.: 
7.0
<class 'float'>


ii)
a = input ("Enter First No.= ")
b = input ("Enter Second No.= ")
print(int(a) + float(b)) 

or

a = int (input ("Enter First No.= ")) 
b = eval (input ("Enter Second No.= "))          # Int and float both 
print(a+b) 

- O/P.:
Enter First No.= 1
Enter Second No.= 7
8.0




3) Literals: 
    It is a syntax that is used to completely express a fixed value of a specific data type.
 
 i) Character Literals: 
     It is also a string literal type in which the character is enclosed in single (') or double (") quotes.

# Code - Character Literals
i)
Character = 'A'   or   "A"
print(Character)
 
- O/P.:
A


ii)
print(chr(65))           # Conversion - ASCII to Character
print(ord('A'))          # Conversion - Character to ASCII

- O/P.:
A
65



 ii) String Literals: 
      It is created by writing a text (a group of Characters) surrounded by a single('), double("), or triple(''') quotes.

# Code - String Literals
i)
String = "Hello, 'World'"                 # String literal in single, double quotes  
print(String)

- O/P.:
Hello, 'World'


ii)
print("1234567...")                        # Within double quote, numbers will be consider as string    

- O/P.: 
1234567...


iii)
String = '''String                              
                  Literal                  # String literal in triple quotes for multi-line
                         Code'''    
print(String)

- O/P.:
String                              
      Literal                            
             Code




String:
 It is data type that stores a sequence of character.

# Code - String
i)
print("123" + "456")                    # Output will be string concatenation
or
print(str(123) + "456")

- O/P.: 
123456


ii)
print(123 + "Hello")                    # Invalid - Different data type

- O/P.: 
unsupported operand type(s): 'int' + 'str'


iii)
String = "Python"  
print(len(String))                      # Length of String

- O/P.: 
6


String Index: 
 Indexing allow to access individual characters in a string directly by using a numeric value.

➡️
  0   1   2   3   4   5   6   7   8   9   - Default
  A   B   C   D   E   F   G   H   I   J 
-10  -9  -8  -7  -6  -5 - 4  -3  -2  -1 
                                        ⬅️

# Code - String Index Accessing
i)
String = "Python" 
print(String[0])                        # Positive Index
print(String[-1])                       # Negative Index = len(List)-List[-ve index]

- O/P.: 
P
n
