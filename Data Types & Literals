Python Data Types: 
 It is used to define the type of data stored in a variable.

# Code - Identify the Type of data
i)
Data = 12345.
print(type(Data))

- O/P.:
<class 'float'>


ii)
Data = None
print(type(Data))

- O/P.:
<class 'NoneType'>


Some built-in Python Data Types are:

i)    String    : str
ii)   Numeric   : int, float, complex
iii)  Binary    : bytes, bytearray, memoryview 
iv)   Boolean   : bool
v)    Sequence  : list, tuple, range
vi)   Mapping   : dict
vii)  Set       : set, frozenset
viii) None Type : NoneType



Typeconversion / Typecasting:
 The conversion of one data type into other data type.

Type of Typecasting:

1) Implicit Typeconversion:
    Conversion will be done by python interpreter from lower to higher data type automatically to prevent loss of data.

# Code - Implicit Typeconversion
i)
a, b = 2, 3                 # Input is Integer Value
print(a/b)

- O/P.: 
0.6666666666666666          # Output is Float value



2) Explicit Typecasting: 
    Conversion done by programmer as per requirement.

# Code - Explicit Typecasting
i)
a = float(7)                # Convert - Int to Float
print(a)
print(type(a))

- O/P.: 
7.0
<class 'float'>


ii)
a = input ("Enter First No.= ")
b = input ("Enter Second No.= ")
print(int(a) + float(b)) 

or

a = int (input ("Enter First No.= ")) 
b = eval (input ("Enter Second No.= "))          # Int and float both 
print(a+b) 

- O/P.:
Enter First No.= 1
Enter Second No.= 7
8.0




3) Literals: 
    It is a syntax that is used to completely express a fixed value of a specific data type.
 
 i) Character Literals: 
     It is also a string literal type in which the character is enclosed in single (') or double (") quotes.

# Code - Character Literals
i)
Character = 'A'   or   "A"
print(Character)
 
- O/P.:
A


ii)
print(chr(65))           # Conversion - ASCII to Character
print(ord('A'))          # Conversion - Character to ASCII

- O/P.:
A
65



 ii) String Literals: 
      It is created by writing a text (a group of Characters) surrounded by a single('), double("), or triple(''') quotes.

# Code - String Literals
i)
String = "Hello, 'World'"                 # String literal in single, double quotes  
print(String)

- O/P.:
Hello, 'World'


ii)
print("1234567...")                        # Within double quote, numbers will be consider as string    

- O/P.: 
1234567...


iii)
String = '''String                              
                  Literal                  # String literal in triple quotes for multi-line
                         Code'''    
print(String)

- O/P.:
String                              
      Literal                            
             Code




String:
 It is data type that stores a sequence of character.

# Code - String
i)
print("123" + "456")                    # Output will be string concatenation
or
print(str(123) + "456")

- O/P.: 
123456


ii)
print(123 + "Hello")                    # Invalid - Different data type

- O/P.: 
unsupported operand type(s): 'int' + 'str'


iii)
String = "Python"  
print(len(String))                      # Length of String

- O/P.: 
6



String Index: 
 Indexing allow to access individual characters in a string directly by using a numeric value.

➡️
  0   1   2   3   4   5   6   7   8   9   - Default
  A   B   C   D   E   F   G   H   I   J 
-10  -9  -8  -7  -6  -5 - 4  -3  -2  -1 
                                        ⬅️

# Code - String Index Accessing
i)
String = "Python" 
print(String[0])                        # Positive Index
print(String[-1])                       # Negative Index = len(List)-List[-ve index]

- O/P.: 
P
n



String Slicing:
 Accessing part of string.

 Default Syntax:
 str[starting index : length of string]  

# Code - String Index Slicing
i)
String = "Python" 
print(String[0:2])
or
print(String[:2])
or
print(String[-1:-2])                    # Invalid - Slicing should be left to right side

- O/P.:
Py


ii)
String = "Python"                       
print(String[::-1])                     # [str index: end index: no. of jumps]

- O/P.:
nohtyP                                  # Reverse String



String Methods: 
  Build-in String methods are as follows:
  capitalize(), casefold(), center(), count(), encode(), endswith(), expandtabs(), find(), format(), format_map(), 
  index(), isalnum(), isalpha(), isdecimal(), isdigit(), isidentifier(), islower(), isnumeric(), isprintable(), isspace(), istitle(), isupper(), 
  join(), ljust(), lower(), lstrip(), maketrans(), partition(), replace(), rfind(), rindex(), rjust(), rpartition(), rsplit(), rstrip(), 
  splitlines(), startswith(), strip(), swapcase(), title(), translate(), upper(), zfill()	
 
# Code - String Methods
i)
String = "Python"  
print(String.upper())                   # Capitalize Each Character

- O/P.: 
PYTHON


ii)
String = "Python"  
print(String.find("r"))               

- O/P.: 
-1                                      # 'r' is not Present



Strings Formatting:
 In an f-string, a placeholder {} can contain variables, operations, functions, and modifiers to format the value.

1) Default Order Format:

# Code - Default Order
i)
String = "Default"
print(f"{String} Order Format")

or

print("{} Order Format".format("Default"))

or

print("{} {} {}".format('Default', 'Order', 'Format')) 

- O/P.: 
Default Order Format



2) Positional Order Format:

# Code - Positional Order 
i)
String = "{2} {0} {1}".format('Order', 'Format', 'Positional')             
print(String)

- O/P.: 
Positional Order Format



3) Keyword Order Format:

# Code - Keyword Order
i)
String = "{K} {O} {F}".format(K = 'Keyword', O = 'Order', F = 'Format')       
print(String)

or

K, O, F = "Keyword", "Order", "Format"
String = "{a} {b} {c}".format(a = K, b = O, c = F)  
print(String)

- O/P.: 
Keyword Order Format





 iii) Numeric Literals:

  iii.i) Integer Numeric Literals: 
          It includes both positive and negative numbers along with 0. 
          It doesn’t include fractional parts. 
          It can also include binary, decimal, octal, hexadecimal literal.  

           Binary      : (0 & 1). The base is 2 and prefixed with '0b'.
           Decimal     : (0 to 9). The base is 10.
           Octal       : (0 to 7). The base is 8. and prefixed with '0o'.
           Hexadecimal : (0 to 9 & A to F). The base is 16. and prefixed with '0x'.
                          
# Code - Integer Literals
i)
print("Decimal value = ", 10)                               
print("Binary value  = ", 0b1010)          

- O/P.:
Decimal value = 10
Binary value  = 10



  iii.ii) Float Numeric Literals: 
           It includes both positive and negative real numbers.
           It also includes fractional parts.

# Code - Float Literals
i)
Float = (7.)     or     float(7)  
print("Float value = ", Float)

- O/P.:
Float value = 7.0



  iii.iii) Complex Numeric Literals:
            It includes real numbers and imaginary numbers.

# Code - Complex Literals
i)
Complex = complex(7,7)
print("Complex value = ", Complex)

- O/P.:
Complex value = (7+7j)




 iv) Boolean Literals: 
      Boolean literals have only two values in Python. These are True (non zero) and False (zero).

# Code - Boolean Literals
i)
print(bool(0.0)) 

- O/P.:
False

ii)
print(int(True))

- O/P.:
1




 v) Special Literals: 
     Python has a special literal ‘None’. It is used to denote nothing, no values, or the absence of value.

# Code - Special Literals
i)
Input = None
print(Input)

- O/P.: 
None
