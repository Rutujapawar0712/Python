 vi) Literals Collection: 

 ■ vi.i) List: 
         It is a list of comma-separated elements or values represented in square [] brackets. 
         The values can be of any data type and can be changed (mutable).
         It allows duplicate values.

# Code - List
i)
Null_List = []                          # Null List
print(Null_List)
print(type(Null_List))                  # Data Type 

- O/P.: 
[]
<class 'list'>


ii)
List = ['P', 'Y', 'T', 'H', 0, 'N', 7.] 
print(List)                
print("Length = ", len(List))           # Length of List

- O/P.: 
['P', 'Y', 'T', 'H', 0, 'N', 7.0]
Length = 7



⫸ List Index:
    Access individual character by using numeric value.

# Code - List Index Accessing
i)
     ➡️  0    1    2    3   4   5   6
List = ['P', 'Y', 'T', 'H', 0, 'N', 7.] 
        -7   -6   -5   -4  -3  -2  -1  ⬅️

print(List[2])                          # Positive Index Accessing
print(List[-2])                         # Negative Index = len(List) - List[-ve index]

- O/P.: 
T
N


# Code - Replace Element
i)
List = ['P', 'Y', 'T', 'H', 0, 'N', 7.] 
List[6] = "HTML"
print(List)

- O/P.: 
['P', 'Y', 'T', 'H', 0, 'N', 'HTML']


# Code - Multidimensional List Index Accessing
i)
       ➡️  00     01      10      11     12
List = [['Python', 7.], ['HTML', 'CSS', 'JS']]         # Multi-Dimensional List
          -2-2   -2-1    -1-3    -1-2   -1-1  ⬅️

print(List[0][1]) 
print(List[-1][-3])

- O/P.: 
7.0
HTML



⫸ List Slicing: 
    Accessing part of list (Sublist).

default Syntax:
[Start index (0) : Last index (Length of list)]

# Code - List Index Slicing
i)
List = ['P', 'Y', 'T', 'H', 0, 'N', 7.]

print(List[-5:-2])                      # Negative Index Slicing

print(List[1:5])                        # Positive Index Slicing
print(List[1:5:2])                      # [Strt index : End index : No. of jumps]

- O/P.: 
['T', 'H', 0]

['Y', 'T', 'H', 0] 
['Y', 'H'] 


# Code - Replace Sublist
i)
List = ['P', 'Y', 'T', 'H', 0, 'N', 7.]
List[2:6] = ["HTML"]
print(List)

- O/P.: 
['P', 'Y', 'HTML', 7.0]
