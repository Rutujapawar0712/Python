■ Object-Oriented Programming

 ■ Class and Object:
    A Class is like an object constructor, or a "blueprint" for creating objects.

</> Syntax:

class ClassName:                        # Create Class
  Statement                             # Define Attributes / Methods

Object = ClassName()                    # Create Object
Object.Attribute / MethodName()         # Call Object Attributes / Methods


# Code - Create Class and Object
i)
class Study:
  course = "Python"

study = Study()
print(study.course)

O/P.:
Python



⫸ Delete:
    'del' keyword is used to delete object or its properties.

# Code - Delete
i)
class Study:
  course = "Python"

study = Study()
print(study.course)

del study                               # Delete Object
 #or
del study.course                        # Delete Attribute

print(study.course)

O/P.:
Python
AttributeError: 'Study' object has no attribute 'course'




 ■ Constructor:
    The '__init__' function initializes a new object, with 'self' referring to the current instance. 
    Only one constructor is used per class to define attributes.


⫸ Type of Constructor:

▪ 1) Default Constructor: 
      It is a constructor that does not take any arguments. 
      The Python interpreter will generate it internally even if we did not write it directly in our code.

</> Syntax:

class ClassName:            

  def __init__(self):                   # Default Constructor
    pass

Object = ClassName()                    # Create Object and '()' will Call Constructor


# Code - Default Constructor
i)
class Study:
  Course = "Python"

  def __init__(self):         
    print("I am learning new course.")

study = Study()    

O/P.:
I am learning new course.



▪ 2) Parameterized Constructor:
      It is a constructor that takes arguments. 
      When two constructors are written for the same class, the constructor with the same number of parameters will be excuted.

</> Syntax:

class ClassName:              

  def __init__(self, para1, ...):       # Parameterize Constructor
    Statement

Object = ClassName(value1, ...)         # Passing values = No. of Parameter in Constructor
Object.Attribute / MethodName()


# Code - Parameterized Constructor
i)
class Study:

  def __init__(self):
    pass

  def __init__(self, course, shift):
    print("I am learning new course:")
    self.course = course
    self.shift = shift

study = Study("Python", "Morning")
print(study.course, "in the", study.shift, "Shift.")

O/P.:
I am learning new course:
Python in the Morning Shift.
