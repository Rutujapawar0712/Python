â–  vi) Literals Collection:

 â–  vi.iii) Dictionary: 
            It is comma-separated set of key-value pairs enclose in curly braces '{}'.
            They are unordered (No Indexing), mutuable(changeable).
            It don't allow duplicate keys.
            Key can be String, Numeric, Boolean or Tuple i.e. it must be immutable. 
            Value can be String, Numeric, List, Tuple, Dict. etc.

# Code - Dictionary
i)
Null_Dict = {}                          # Null Dict.
print(Null_Dict)
print(type(Null_Dict))

- O/P.: 
{}
<class 'dict'>


ii)
Dict = {"No. of Sub.": "4", 
        "Subjects": ["Python", "HTML", "CSS", "JS"]}

print(Dict)
print(len(Dict))

- O/P.: 
{'No. of Sub.': '4', 'Subjects': ['Python', 'HTML', 'CSS', 'JS']}
2


# Code - Accesing Information in Dictionary
i)
Dict = {"No. of Sub.": "4", 
        "Subjects": ["Python", "HTML", "CSS", "JS"]}
 
print(Dict["Subjects"])

- O/P.: 
['Python', 'HTML', 'CSS', 'JS']


# Code - Replacing value of any Key.
i)
Dict = {"No. of Sub.": "4", "Subject": "Python"}

Dict["No. of Sub."] = "1"
print(Dict)

- O/P.: 
{'No. of Sub.': '1', 'Subject': 'Python'}


# Code - Add Key to Dictionary
i)
Dict = {"No. of Sub.": "1", "Subject": "Python"}

Dict["Topics"] = ("List", "Tuple", "Dict.", "Set")
print(Dict)

- O/P.: 
{'No. of Sub.': '1', 'Subject': 'Python', 'Topics': ('List', 'Tuple', 'Dict.', 'Set')}



â«¸ Nested Dictionary:
    In Key: Value pair, dictionary value contains another dictionary.

# Code - Accessing Nested Dictionary
i)
Dict = {"No. of Sub.": "4", 
        "Subjects": {"Python": 99, "HTML": 98, "JS": 97}}

print (Dict)
print (Dict["Subjects"]["Python"])

- O/P.: 
{'No. of Sub.': '4', 'Subject': {'Python': 99, 'HTML': 98, 'JS': 97}}
99



â«¸ Dictionary Methods:
    clear(), copy(), fromkeys(), get(key), items(), keys(), pop(), popitem(), setdefault(), update(), values()

# Code - Get Method
i)
Dict = {"No. of Sub.": "1", "Subject": "Python"}

print(Dict["Topics"])                   # Output will be 'Error' if key is not present
 #or
print(Dict.get("Topics"))               # More Prferable - Output will be 'None' if key is not present

- O/P.: 
KeyError: 'Topics'
None


# Code - Item Method
i)
Dict = {"No. of Sub.": "1", "Subject": "Python"}
print(Dict.items())                                  # Return all key:value pair as a Tuple

- O/P.: 
dict_items([('No. of Sub.', '1'), ('Subject', 'Python')])



â«¸ Conversion / Typecasting:

# Code - Converting Dictionary into a List
i)
Dict = {"No. of Sub.": "1", "Subject": "Python"}

print (list(Dict[]))
 #or
List = (list(Dict))                             
print(List)

print(List[0])                          # Accessing List Index

- O/P.: 
['No. of Sub.', 'Subject']
'No. of Sub.





ðŸ¤” Q. Write a program to enter marks of 3 subjects from the user and store them in dictionary. Start with an empty dictionary & add one by one. 
      Use subject name as key & marks as value.

# Code

Result = {}

Marks = int(input("Enter Marks of Python = "))
Result["Python"] = Marks

Marks = int(input("Enter Marks of HTML = "))
Result.update({"HTML" : Marks})

Subject = str(input("Enter Other Subject = "))
Marks = int(input("Enter Marks of Other Subject = "))
Result.update({Subject : Marks})

print(Result)


- O/P.:
Enter Marks of Python = 99
Enter Marks of HTML = 98
Enter Other Subject = JS
Enter Marks of Other Subject = 97
{'Python': 99, 'HTML': 98, 'JS': 97}




ðŸ¤” Q. Write a program to convert an integer into a character.

# Code

No = input("Enter No. = ")

Convert = {"0" : "Zero",  "1" : "One",
           "2" : "Two",   "3" : "Three",
           "4" : "Four",  "5" : "Five",
           "6" : "Six",   "7" : "Seven",
           "8" : "Eight", "9" : "Nine"}

Ans = " "

for x in No:
   Ans += Convert.get(x, "Invalid") + "  "

print(Ans)


- O/P.:
Enter No. = 975310 r
 Nine  Seven  Five  Three  One  Zero  Invalid  Invalid
